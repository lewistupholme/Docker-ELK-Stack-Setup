input {
	beats {
		port => 5044
		tags => [ "winlogbeat" ]
	}
}


## trying for geoIP

filter {
  geoip {
    source => "[winlog][event_data][IpAddress]"
 }
}

##adminSDholder detection
filter {
  if "winlogbeat" in [tags] and [winlog][event_id] == 5136 and [winlog][event_data][OperationType] == "%%14674" and [winlog][event_data][ObjectDN] == "CN=AdminSDHolder,CN=System,DC=production,DC=local" {
    mutate {
    add_field => {"event_message" => "WARNING: A change has been made to the AdminSDHolder holder"}
  }
 }
}
 
## Active directory login activity 

filter {
  if "winlogbeat" in [tags] and [winlog][event_id] == 4624 {
   mutate { 
   add_field => { "event_message" => "An account was successfully logged on" }
  } 
 }
}

## Active directory logoff activity
filter {
  if "winlogbeat" in [tags] and [winlog][event_id] == 4634 {
   mutate { 
   add_field => { "event_message" => "An account was logged off" }
  } 
 }
}

## Active directory login failure 

filter {
  if "winlogbeat" in [tags] and [winlog][event_id] == 4625  {
   mutate {
   add_field => { "event_message" => "Login failure activity" }
  } 
 }
}


## explicit creds used 

filter {
  if "winlogbeat" in [tags] and [winlog][event_id] == 4648  {
   mutate {
   add_field => { "event_message" => "A login was attempted using explicit credentials" }
  } 
 }
}

## Login error messages 4625 "A account failed to log on"
filter {
  if "winlogbeat" in [tags] and [winlog][event_data][Status] == "0xc000006d" {
   mutate { 
   add_field => { "login_error_msg" => "Login Failure" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc000006e" {
   mutate { 
   add_field => { "login_error_msg" => "Unknown user name or bad password." }
  } 
 }
 
  else if [winlog][event_data][Status] == "0xc000005e" {
   mutate { 
   add_field => { "login_error_msg" => "No Login Servers available to login" }
  } 
 }
 
  else if [winlog][event_data][Status] == "0xc0000133" {
   mutate { 
   add_field => { "login_error_msg" => "Workstation’s clock out of sync with the DC" }
  } 
 }

  else if [winlog][event_data][Status] == "0xc00002ee" {
   mutate { 
   add_field => { "login_error_msg" => "An Error occured during Login" }
  } 
 }
 
  else if [winlog][event_data][Status] == "0xc000015b" {
   mutate { 
   add_field => { "login_error_msg" => "Login Not Allowed for this system" }
  } 
 }
 
  else if [winlog][event_data][Status] == "0xc0000225" {
   mutate { 
   add_field => { "login_error_msg" => "Windows Bug and not a risk" }
  } 
 }
## related to 4771,4776,4769,4768
  else if [winlog][event_data][Status] == "0x0" {
   mutate { 
   add_field => { "login_msg" => "Success" }
  } 
 }
  else if [winlog][event_data][Status] == "0x12" {
   mutate { 
   add_field => { "login_error_msg" => "Account disabled, expired, locked out, logon hours" }
  } 
 }
  else if [winlog][event_data][Status] == "0xB" {
   mutate { 
   add_field => { "login_error_msg" => "Request start time is later than end time" }
  } 
 }
  else if [winlog][event_data][Status] == "0x17" {
   mutate { 
   add_field => { "login_error_msg" => "Password has expired" }
  } 
 }
  else if [winlog][event_data][Status] == "0x18" {
   mutate { 
   add_field => { "login_error_msg" => "Bad password" }
  } 
 }
  else if [winlog][event_data][Status] == "0x1b" {
   mutate { 
   add_field => { "login_error_msg" => "Server principal valid for user-to-user only" }
  } 
 }
  else if [winlog][event_data][Status] == "0x1d" {
   mutate { 
   add_field => { "login_error_msg" => "A service is not available" }
  } 
 }
  else if [winlog][event_data][Status] == "0x20" {
   mutate { 
   add_field => { "login_error_msg" => "Ticket expired- Frequently logged by computer accounts" }
  } 
 }
  else if [winlog][event_data][Status] == "0x25" {
   mutate { 
   add_field => { "login_error_msg" => "Workstation’s clock out of sync with the DC" }
  } 
 }
  else if [winlog][event_data][Status] == "0x6" {
   mutate { 
   add_field => { "login_error_msg" => "Username does not exist or has not replicated" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc000006a" {
   mutate { 
   add_field => { "login_error_msg" => "Incorrect Password" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc0000064" {
   mutate { 
   add_field => { "login_error_msg" => "Username Does Not Exist" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc0000072" {
   mutate { 
   add_field => { "login_error_msg" => "Account is disabled" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc0000234" {
   mutate { 
   add_field => { "login_error_msg" => "Account is Locked Out" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc0000193" {
   mutate { 
   add_field => { "login_error_msg" => "Account Expiration" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc000006f" {
   mutate { 
   add_field => { "login_error_msg" => "Logon Outside Hours" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc0000224" {
   mutate { 
   add_field => { "login_error_msg" => "Use required to change password next time" }
  } 
 }
  else if [winlog][event_data][Status] == "0xc0000071" {
   mutate { 
   add_field => { "login_error_msg" => "Password expired" }
  } 
 }
}

## Login types
 
filter {
  if "winlogbeat" in [tags] and [winlog][event_data][LogonType] == "2" {
   mutate { 
   add_field => { "login_method" => "Interactive Keyboard" }
  } 
 }
 else if [winlog][event_data][LogonType] == "3" {
   mutate { 
   add_field => { "login_method" => "Network Login" } 
 }
 }
 else if [winlog][event_data][LogonType] == "4" {
   mutate { 
   add_field => { "login_method" => "Batch - Scheduled Task" }
  } 
 }
 else if [winlog][event_data][LogonType] == "5" {
   mutate { 
   add_field => { "login_method" => "Service Account" }
  } 
 }
 else if [winlog][event_data][LogonType] == "7" {
   mutate { 
   add_field => { "login_method" => "Unlock System" }
  } 
 }
 else if [winlog][event_data][LogonType] == "8" {
   mutate { 
   add_field => { "login_method" => "Network Clear text" }
  } 
 }
 else if [winlog][event_data][LogonType] == "9" {
   mutate { 
   add_field => { "login_method" => "New Credentials" }
  } 
 }
 else if [winlog][event_data][LogonType] == "10" {
   mutate { 
   add_field => { "login_method" => "Remote Interactive" }
  } 
 }
 else if [winlog][event_data][LogonType] == "11" {
   mutate { 
   add_field => { "login_method" => "Cached Interactive" }
  } 
 }
 
 else if [winlog][event_data][LogonType] == "0" {
   mutate { 
   add_field => { "login_method" => "System Account" }
  } 
 }

}
## User lockouts & password resets & disables
filter {
  if "winlogbeat" in [tags] and [winlog][event_id] == 4740  {
   mutate { 
   add_field => { "event_message" => "A user account was locked out" }
  } 
 }
 else if [winlog][event_id] == 4767 {
   mutate { 
   add_field => { "event_message" => "A user account was unlocked" }
  } 
 }
 else if [winlog][event_id] == 4723 {
   mutate { 
   add_field => { "event_message" => "An attempt was made to change an users password" }
  } 
 }
 else if [winlog][event_id] == 4724 {
   mutate { 
   add_field => { "event_message" => "An attempt was made to reset a users password" }
  } 
 }
 else if [winlog][event_id] == 4725 {
   mutate { 
   add_field => { "event_message" => "A user account was disabled" }
  } 
 }
 else if [winlog][event_id] == 4722 {
   mutate { 
   add_field => { "event_message" => "A user account was enabled" }
  } 
 }
 else if [winlog][event_id] == 4720 {
   mutate { 
   add_field => { "event_message" => "A user account was created" }
  } 
 }
}

## AD group management 

filter {
  if "winlogbeat" in [tags] and [winlog][event_id] == 4727  {
   mutate { 
   add_field => { "event_message" => "A security-enabled global group was created" }
  } 
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  }
 }
 else if [winlog][event_id] == 4728 {
   mutate {
   add_field => { "event_message" => "A member was added to a security-enabled global group" }
  }
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  }
  grok {
  match => {
   "[winlog][event_data][MemberName]" => "(?<winlog.event_data.TargetUserName>(?<=CN=)\w*\s\w*[^,])"
     }
   }
 }
 else if [winlog][event_id] == 4729 {
   mutate { 
   add_field => { "event_message" => "A member was removed from a security-enabled global group" }
  }
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  }
  grok {
  match => {
   "[winlog][event_data][MemberName]" => "(?<winlog.event_data.TargetUserName>(?<=CN=)\w*\s\w*[^,])"
     }
   } 
 }
 else if [winlog][event_id] == 4730 {
   mutate { 
   add_field => { "event_message" => "A security-enabled global group was deleted" }
  }
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  } 
 }
 else if [winlog][event_id] == 4731 {
   mutate { 
   add_field => { "event_message" => "A security-enabled local group was created" }
  }
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  } 
 }
 else if [winlog][event_id] == 4732 {
   mutate { 
   add_field => { "event_message" => "A member was added to a security-enabled local group" }
  }
mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  }
  grok {
  match => {
   "[winlog][event_data][MemberName]" => "(?<winlog.event_data.TargetUserName>(?<=CN=)\w*\s\w*[^,])"
     }
   } 
 }
 else if [winlog][event_id] == 4733 {
   mutate { 
   add_field => { "event_message" => "A member was removed from a security-enabled local group" }
  }
mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  }
  grok {
  match => {
   "[winlog][event_data][MemberName]" => "(?<winlog.event_data.TargetUserName>(?<=CN=)\w*\s\w*[^,])"
     }
   } 
 }
 else if [winlog][event_id] == 4734  {
   mutate { 
   add_field => { "event_message" => "A security-enabled local group was deleted" }
  }
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  } 
 }
 else if [winlog][event_id] == 4735 {
   mutate { 
   add_field => { "event_message" => "A security-enabled local group was changed" }
  } 
 }
 else if [winlog][event_id] == 4737 {
   mutate { 
   add_field => { "event_message" => "A security-enabled global group was changed" }
  } 
 }
 else if [winlog][event_id] == 4754 {
   mutate { 
   add_field => { "event_message" => "A security-enabled universal group was created" }
  }
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  } 
 }
 else if [winlog][event_id] == 4755 {
   mutate { 
   add_field => { "event_message" => "A security-enabled universal group was changed" }
  } 
 }
 else if [winlog][event_id] == 4756 {
   mutate { 
   add_field => { "event_message" => "A member was added to a security-enabled universal group" }
  }
mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  }
  grok {
  match => {
   "[winlog][event_data][MemberName]" => "(?<winlog.event_data.TargetUserName>(?<=CN=)\w*\s\w*[^,])"
     }
   }
 }
 else if [winlog][event_id] == 4757 {
   mutate { 
   add_field => { "event_message" => "A member was removed from a security-enabled universal group" }
  }
mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  }
  grok {
  match => {
   "[winlog][event_data][MemberName]" => "(?<winlog.event_data.TargetUserName>(?<=CN=)\w*\s\w*[^,])"
     }
   }
 }
 else if [winlog][event_id] == 4758 {
   mutate { 
   add_field => { "event_message" => "A security-enabled universal group was deleted" }
  }
  mutate {
  rename => {"[winlog][event_data][TargetUserName]" => "[winlog][event_data][TargetGroupName]"}
  } 
 }
 else if [winlog][event_id] == 4764 {
   mutate { 
   add_field => { "event_message" => "A group's type was changed" }
  } 
 }
 
}

## Classfication change

filter { 
  if "classification-logs" in [log][file][path] {
     csv {
     separator => ","
     columns => ["time_stamp","winlog.event_data.TargetGroupName","classification_new","classification_old"]
     skip_header => true
         }
                                 }
         }
## admin count change

filter { 
  if "admin-count-logs" in [log][file][path] {
     csv {
     separator => ","
     columns => ["event_message","winlog.event_data.TargetUserName","ObjectClass","Created"]
     skip_header => true
         }
                                 }
         }
## token size alerter 

filter { 
  if "token-size-logs" in [log][file][path] {
     csv {
     separator => ","
     columns => ["winlog.event_data.TargetUserName","status","nested_groups","direct_groups"]
     skip_header => true
         }
                                 }
         }
## inactive users

filter { 
  if "inactive-user-logs" in [log][file][path] {
     csv {
     separator => ","
     columns => ["winlog.event_data.TargetUserName","last_login"]
     skip_header => true 
         }
                                 }
         }

## empty groups

filter { 
  if "empty-group-logs" in [log][file][path] {
     csv {
     separator => ","
     columns => ["winlog.event_data.TargetGroupName","classification","whenCreated"]
     skip_header => true 
         }
                                 }
         }
## users no membership

filter { 
  if "users-nogroup-logs" in [log][file][path] {
     csv {
     separator => ","
     columns => ["winlog.event_data.TargetUserName","DistinguishedName","Created"]
     skip_header => true 
         }
                                 }
         }
## ps error logging

filter { 
  if "ps_error_logs" in [log][file][path] {
     csv {
     separator => ","
     columns => ["time","error","location","ps_message"]
     skip_header => true 
         }
                                 }
         }
output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
		index => "logstash-winlogbeat-%{+YYYY.MM.dd}"
	}
	stdout { codec => rubydebug }
}
